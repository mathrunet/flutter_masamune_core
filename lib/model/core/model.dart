part of masamune.model;

/// The base class of the model.
///
/// You need to specify a data model that extends [IPath].
///
/// [FieldModel], [DocumentModel] and [CollectionModel] are usually used depending on the data structure to be used.
///
/// If you want to use your newly created data structures, you may want to extend this class to create your own models.
abstract class Model<Created extends Object, Exposed extends IPath> {
  ModelContext _context;

  /// Get the path.
  final String path;

  /// The base class of the model.
  ///
  /// You need to specify a data model that extends [IPath].
  ///
  /// [FieldModel], [DocumentModel] and [CollectionModel] are usually used depending on the data structure to be used.
  ///
  /// If you want to use your newly created data structures, you may want to extend this class to create your own models.
  @mustCallSuper
  Model(this.path)
      : assert(isNotEmpty(path),
            "Please specify the path. path cannot be blank.") {
    this._context = ModelContext._(this);
    this._buildInternal();
  }

  void _buildInternal() async {
    await this.exposeValue(
      this.build(this._context),
    );
  }

  /// Rebuild the model and update the data.
  ///
  /// Returns itself after being rebuilt.
  Future<TModel> rebuild<TModel extends Model>([Created createdValue]) async {
    await this.exposeValue(
      createdValue ?? (await this.build(this._context)),
    );
    return this as TModel;
  }

  /// Build the model.
  ///
  /// The [context] section contains the context needed for the model.
  ///
  /// You can return [Exposed] to reflect the data in it in the model.
  @protected
  FutureOr build(ModelContext context);

  /// Converts a value to an object in path format.
  ///
  /// In [createdValue], the data generated by [build] is stored.
  ///
  /// Finally, by storing it in an object of [IPath] format,
  /// it can be obtained by [state].
  @protected
  FutureOr<Exposed> exposeValue(FutureOr createdValue);

  /// Retrieve the data obtained from the model.
  ///
  /// Normally, you will get the data from the [build] method.
  @protected
  Exposed get state => PathMap.get<Exposed>(this.path);

  /// Discard the model.
  void dispose() {
    this._context?._dispose();
  }
}
